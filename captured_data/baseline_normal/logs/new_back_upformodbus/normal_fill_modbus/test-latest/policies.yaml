# ===================================================================
# Universal ICS Security Policy - Context-Aware Detection
# ===================================================================

policy_name: "BottlingPlant_Comprehensive_Policy_v2.3"
description: "Defines all normal operational modes, with a final, more tolerant polling interval to eliminate minor jitter alerts."

# ===================================================================
# Section 1: Rules for State-Changing WRITE Commands
# ===================================================================
write_value_rules:
  # Valid state values for WRITE commands
  valid_states: [100, 400, 500]

  # State transition rules based on timing analysis
  state_transitions:
    # === Transitions starting FROM state 500 ===
    "500":
      # Normal Fill cycle: 500 -> 500 (91-95 seconds)
      "500":
        - min_time: 85.0
          max_time: 100.0
          description: "Normal Fill cycle"
      
      # Pause cycles: 500 -> 100 (two valid timing windows)
      "100":
        - min_time: 5.0   # Pause on Fill
          max_time: 15.0
          description: "Pause on Fill cycle start"
        - min_time: 50.0  # Pause on Dispense
          max_time: 70.0
          description: "Pause on Dispense cycle start"

    # === Transitions starting FROM state 100 ===
    "100":
      # Both pause modes: 100 -> 400 (18-20 seconds)
      "400":
        - min_time: 15.0
          max_time: 25.0
          description: "Resume command after pause"

    # === Transitions starting FROM state 400 ===
    "400":
      # End of pause cycles: 400 -> 500 (two valid timing windows)
      "500":
        - min_time: 30.0  # Pause on Dispense (shorter pause)
          max_time: 45.0
          description: "End of Pause on Dispense cycle"
        - min_time: 75.0  # Pause on Fill (longer pause)
          max_time: 95.0
          description: "End of Pause on Fill cycle"

# ===================================================================
# Section 2: Rules for Rhythmic READ Polling
# ===================================================================
polling_rules:
  # Maximum idle time before state tracker resets (prevents false positives after restart)
  max_idle_time: 10.0  # seconds
  
  # Expected latency between REQUEST and RESPONSE
  request_response_latency:
    min_time: 0.0005  # 0.5 ms
    max_time: 0.01    # 10 ms
  
  # Valid polling sequences
  sequences:
    - name: "Standard_3-Step_Poll"
      # Function code sequence that should repeat
      function_sequence:
        - "READ_COILS"
        - "READ_INPUT_REGISTERS" 
        - "READ_HOLDING_REGISTERS"
      # Timing between each command in sequence
      inter_request_interval:
        # *** FINAL FIX ***
        # Widened the window slightly more to account for all observed jitter.
        min_time: 0.140  # 140 ms
        max_time: 0.220  # 220 ms

# ===================================================================
# Section 3: Network and Protocol Rules (Existing)
# ===================================================================
network:
  # IP to VLAN mapping for network segmentation
  ip_to_vlan_map:
    '10.10.10.10': 10    # PLC/RTU
    '10.10.20.30': 20    # HMI/SCADA
  
  # Authorized source IPs
  authorized_ips: ['10.10.20.30']
  
  # Network rules
  ip_whitelist_rule:
    id: R012
    description: "Device spoofing attempt from unauthorized IP"
    severity: high
    mitre: { tactic: TA0007, technique: T0812 }
    real_world: "Impersonation attacks"
    nis2_article: "Article 23"
  
  network_segmentation_rule:
    id: R004
    description: "VLAN violation - device on wrong VLAN"
    severity: critical
    mitre: { tactic: TA0007, technique: T0812 }
    real_world: "VLAN Hopping, Network Misconfiguration"
    nis2_article: "Article 21"

protocol:
  # Allowed Modbus function codes
  allowed_funcs: [1, 3, 4, 6]  # READ_COILS, READ_HOLDING, READ_INPUT, WRITE_SINGLE
  
  # Timing constraints for polling
  polling_interval_min: 0.15  # 150ms minimum between requests
  polling_interval_max: 0.20  # 200ms maximum between requests
  
  # Protocol rules
  function_code_rule:
    id: R006
    description: "Illegal Modbus function code used"
    severity: high
    mitre: { tactic: TA0007, technique: T0812 }
    real_world: "Protocol abuse, fuzzing"
    nis2_article: "Article 23"

registers:
  # Tank level register (read-only, physical constraints)
  - address: 100
    name: 'TankLevel'
    access: 'read-only'
    value_range: [0, 80]
    max_rate_of_change: 10.0
    rules:
      - id: R002
        description: "Physical constraint violation - impossible tank level"
        severity: high
        mitre: { tactic: TA0007, technique: T0812 }
        real_world: "Maroochy attack"
        nis2_article: "Article 21.b"
  
  # Control register (read-write, specific values only)
  - address: 1024
    name: 'ControlRegister'
    access: 'read-write'
    allowed_write_values: [100, 400, 500]  # PAUSE, RESUME, START
    rules:
      - id: R001
        description: "Unauthorized write to control register"
        severity: high
        mitre: { tactic: TA0006, technique: T0831 }
        real_world: "Triton (2017)"
        nis2_article: "Article 23"

state_machine:
  # Process state definitions
  - state_name: 'IDLE'
    coil_pattern: [false, false, false, false, false, false, false, false]
    valid_commands:
      - { func: 6, addr: 1024, value: 500 }  # START command
    valid_next_states: ['FILLING']
  
  - state_name: 'FILLING'
    coil_pattern: [true, false, false, false, false, false, false, false]
    valid_commands:
      - { func: 6, addr: 1024, value: 100 }  # PAUSE command
    valid_next_states: ['PAUSED_DURING_FILL', 'DISPENSING']
  
  - state_name: 'PAUSED_DURING_FILL'
    coil_pattern: [false, true, false, false, true, false, false, false]
    valid_commands:
      - { func: 6, addr: 1024, value: 400 }  # RESUME command
    valid_next_states: ['FILLING']
  
  - state_name: 'DISPENSING'
    coil_pattern: [false, false, true, false, false, false, false, false]
    valid_commands:
      - { func: 6, addr: 1024, value: 100 }  # PAUSE command
    valid_next_states: ['PAUSED_DURING_DISPENSE']
  
  - state_name: 'PAUSED_DURING_DISPENSE'
    coil_pattern: [false, false, false, false, true, false, false, false]
    valid_commands:
      - { func: 6, addr: 1024, value: 400 }  # RESUME command
    valid_next_states: ['DISPENSING']
  
# State machine rule
state_logic_rule:
    id: R008
    description: "Process state violation - invalid command for current state"
    severity: high
    mitre: { tactic: TA0007, technique: T0812 }
    real_world: "Logic abuse"
    nis2_article: "Article 21"

# State transition timing rule
state_transition_rule:
    id: R015
    description: "State transition timing violation - invalid timing between states"
    severity: high
    mitre: { tactic: TA0007, technique: T0812 }
    real_world: "Timing-based attacks, Process manipulation"
    nis2_article: "Article 23"

# Polling sequence rule
polling_sequence_rule:
    id: R016
    description: "Polling sequence violation - broken rhythm or incorrect sequence"
    severity: medium
    mitre: { tactic: TA0007, technique: T0812 }
    real_world: "Replay attacks, Timing manipulation"
    nis2_article: "Article 23"

# Global detection rules
global_rules:
  # Replay attack detection
  - id: R003
    description: "Replay attack detected - same TID repeated"
    severity: medium
    mitre: { tactic: TA0008, technique: T0815 }
    real_world: "Stuxnet"
    nis2_article: "Article 23"
    detection_type: "replay"
    time_window_seconds: 2
    count: 3
  
  # Frequency anomaly detection
  - id: R007
    description: "Frequency anomaly - excessive requests"
    severity: medium
    mitre: { tactic: TA0007, technique: T0812 }
    real_world: "Denial of Service precursor"
    nis2_article: "Article 23"
    detection_type: "frequency"
    flood_threshold: 20
    flood_window_seconds: 5
  
  # Value frequency detection
  - id: R013
    description: "Excessive start commands in short period"
    severity: medium
    mitre: { tactic: TA0006, technique: T0831 }
    real_world: "Command abuse"
    nis2_article: "Article 23"
    detection_type: "value_frequency"
    role: "start_cmd"
    value: 500
    max_occurrences: 5
    time_window_seconds: 60

# Multi-stage attack correlation
multi_stage_rule:
  id: R011
  description: "Multi-stage attack: start_cmd + replay + alarm suppression"
  rule_ids: [R001, R003, R005]
  severity: critical
  mitre: { tactic: TA0008, technique: T0815 }
  real_world: "Stuxnet"
  nis2_article: "Article 23" 
